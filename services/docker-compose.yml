version: '3.8'

services:
  # =====================================================
  # ChainLens Core - API Gateway
  # =====================================================
  chainlens-core:
    build:
      context: ./chainlens-core
      dockerfile: Dockerfile.dev
    container_name: chainlens-core
    ports:
      - "3006:3006"
    env_file:
      - .env.development
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/chainlens_core
      - REDIS_HOST=redis
      - SUPABASE_URL=https://mock-project.supabase.co
    volumes:
      - ./chainlens-core/src:/app/src:ro
      - ./chainlens-core/test:/app/test:ro
      - ./chainlens-core/logs:/app/logs
      - chainlens-core-node-modules:/app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - chainlens-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =====================================================
  # PostgreSQL Database
  # =====================================================
  postgres:
    image: postgres:15-alpine
    container_name: chainlens-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=chainlens_core
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - chainlens-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chainlens_core"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================================
  # Redis Cache & Session Store
  # =====================================================
  redis:
    image: redis:7-alpine
    container_name: chainlens-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - chainlens-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================================
  # Adminer - Database Management
  # =====================================================
  adminer:
    image: adminer:latest
    container_name: chainlens-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - chainlens-network
    restart: unless-stopped

  # =====================================================
  # Redis Commander - Redis Management
  # =====================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: chainlens-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - chainlens-network
    restart: unless-stopped

# =====================================================
# Networks
# =====================================================
networks:
  chainlens-network:
    driver: bridge
    name: chainlens-network

# =====================================================
# Volumes
# =====================================================
volumes:
  postgres-data:
    name: chainlens-postgres-data
  redis-data:
    name: chainlens-redis-data
  chainlens-core-node-modules:
    name: chainlens-core-node-modules
