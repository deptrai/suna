# =====================================================
# ChainLens Crypto Services - Secrets Template
# =====================================================
# 
# IMPORTANT: This is a template file. 
# Create actual secrets using kubectl or your CI/CD pipeline.
# DO NOT commit actual secrets to version control.
#
# Usage:
# 1. Copy this file to secrets.yaml
# 2. Replace all placeholder values with actual secrets
# 3. Apply: kubectl apply -f secrets.yaml
# 4. Delete the secrets.yaml file
# =====================================================

apiVersion: v1
kind: Secret
metadata:
  name: chainlens-secrets
  namespace: chainlens-crypto
  labels:
    app: chainlens-crypto
    component: secrets
type: Opaque
data:
  # Database URLs (base64 encoded)
  database-url: <BASE64_ENCODED_SUPABASE_DATABASE_URL>
  microservices-database-url: <BASE64_ENCODED_MICROSERVICES_DATABASE_URL>
  
  # Database Passwords
  postgres-password: <BASE64_ENCODED_POSTGRES_PASSWORD>
  
  # Redis Configuration
  redis-url: <BASE64_ENCODED_REDIS_URL>
  redis-password: <BASE64_ENCODED_REDIS_PASSWORD>
  
  # Supabase Configuration
  supabase-url: <BASE64_ENCODED_SUPABASE_URL>
  supabase-jwt-secret: <BASE64_ENCODED_SUPABASE_JWT_SECRET>
  supabase-service-key: <BASE64_ENCODED_SUPABASE_SERVICE_KEY>
  
  # External API Keys
  moralis-api-key: <BASE64_ENCODED_MORALIS_API_KEY>
  coingecko-api-key: <BASE64_ENCODED_COINGECKO_API_KEY>
  twitter-bearer-token: <BASE64_ENCODED_TWITTER_BEARER_TOKEN>
  news-api-key: <BASE64_ENCODED_NEWS_API_KEY>
  reddit-client-id: <BASE64_ENCODED_REDDIT_CLIENT_ID>
  reddit-client-secret: <BASE64_ENCODED_REDDIT_CLIENT_SECRET>
  github-token: <BASE64_ENCODED_GITHUB_TOKEN>
  linkedin-api-key: <BASE64_ENCODED_LINKEDIN_API_KEY>
  
  # JWT and Encryption
  jwt-secret: <BASE64_ENCODED_JWT_SECRET>
  encryption-key: <BASE64_ENCODED_ENCRYPTION_KEY>

---
# =====================================================
# Example script to create secrets from environment variables
# Save this as create-secrets.sh and run it
# =====================================================
# #!/bin/bash
# 
# # Ensure namespace exists
# kubectl create namespace chainlens-crypto --dry-run=client -o yaml | kubectl apply -f -
# 
# # Create secrets from environment variables
# kubectl create secret generic chainlens-secrets \
#   --namespace=chainlens-crypto \
#   --from-literal=database-url="$DATABASE_URL" \
#   --from-literal=microservices-database-url="$MICROSERVICES_DATABASE_URL" \
#   --from-literal=postgres-password="$POSTGRES_PASSWORD" \
#   --from-literal=redis-url="$REDIS_URL" \
#   --from-literal=redis-password="$REDIS_PASSWORD" \
#   --from-literal=supabase-url="$SUPABASE_URL" \
#   --from-literal=supabase-jwt-secret="$SUPABASE_JWT_SECRET" \
#   --from-literal=supabase-service-key="$SUPABASE_SERVICE_KEY" \
#   --from-literal=moralis-api-key="$MORALIS_API_KEY" \
#   --from-literal=coingecko-api-key="$COINGECKO_API_KEY" \
#   --from-literal=twitter-bearer-token="$TWITTER_BEARER_TOKEN" \
#   --from-literal=news-api-key="$NEWS_API_KEY" \
#   --from-literal=reddit-client-id="$REDDIT_CLIENT_ID" \
#   --from-literal=reddit-client-secret="$REDDIT_CLIENT_SECRET" \
#   --from-literal=github-token="$GITHUB_TOKEN" \
#   --from-literal=linkedin-api-key="$LINKEDIN_API_KEY" \
#   --from-literal=jwt-secret="$JWT_SECRET" \
#   --from-literal=encryption-key="$ENCRYPTION_KEY" \
#   --dry-run=client -o yaml | kubectl apply -f -
# 
# echo "Secrets created successfully!"

---
# =====================================================
# ConfigMap for non-sensitive configuration
# =====================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: chainlens-config
  namespace: chainlens-crypto
  labels:
    app: chainlens-crypto
    component: config
data:
  # Service Configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  
  # API URLs (public endpoints)
  DEXSCREENER_API_URL: "https://api.dexscreener.com"
  DEFILLAMA_API_URL: "https://api.llama.fi"
  
  # Rate Limiting
  THROTTLE_TTL: "60"
  THROTTLE_LIMIT: "1000"
  FREE_TIER_LIMIT: "10"
  PRO_TIER_LIMIT: "1000"
  ENTERPRISE_TIER_LIMIT: "10000"
  
  # Cache Configuration
  CACHE_TTL_SHORT: "180"
  CACHE_TTL_MEDIUM: "900"
  CACHE_TTL_LONG: "3600"
  
  # HTTP Client Configuration
  HTTP_TIMEOUT: "30000"
  HTTP_MAX_REDIRECTS: "5"
  HTTP_RETRIES: "3"
  HTTP_RETRY_DELAY: "1000"
  
  # Circuit Breaker Configuration
  CIRCUIT_BREAKER_THRESHOLD: "5"
  CIRCUIT_BREAKER_TIMEOUT: "60000"
  CIRCUIT_BREAKER_RESET_TIMEOUT: "30000"
  
  # Health Check Configuration
  HEALTH_CHECK_TIMEOUT: "5000"
  HEALTH_CHECK_INTERVAL: "30000"
  
  # Monitoring Configuration
  METRICS_ENABLED: "true"
  
  # Feature Flags
  FEATURE_SENTIMENT_ANALYSIS: "true"
  FEATURE_TEAM_VERIFICATION: "true"
  FEATURE_ADVANCED_METRICS: "true"
  FEATURE_REAL_TIME_UPDATES: "true"

---
# =====================================================
# RBAC Configuration
# =====================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: chainlens-crypto
  name: chainlens-crypto-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chainlens-crypto-rolebinding
  namespace: chainlens-crypto
subjects:
- kind: ServiceAccount
  name: chainlens-core
  namespace: chainlens-crypto
- kind: ServiceAccount
  name: onchain-analysis
  namespace: chainlens-crypto
- kind: ServiceAccount
  name: sentiment-analysis
  namespace: chainlens-crypto
- kind: ServiceAccount
  name: tokenomics-analysis
  namespace: chainlens-crypto
- kind: ServiceAccount
  name: team-verification
  namespace: chainlens-crypto
roleRef:
  kind: Role
  name: chainlens-crypto-role
  apiGroup: rbac.authorization.k8s.io

---
# =====================================================
# Network Policies
# =====================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: chainlens-crypto-network-policy
  namespace: chainlens-crypto
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: chainlens-crypto
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  - ports:
    - protocol: TCP
      port: 3006
    - protocol: TCP
      port: 3001
    - protocol: TCP
      port: 3002
    - protocol: TCP
      port: 3003
    - protocol: TCP
      port: 3004
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
