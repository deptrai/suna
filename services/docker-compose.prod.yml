version: '3.8'

services:
  # =====================================================
  # ChainLens Core - API Gateway (Production)
  # =====================================================
  chainlens-core:
    build:
      context: ./chainlens-core
      dockerfile: Dockerfile
    container_name: chainlens-core-prod
    ports:
      - "3006:3006"
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
    volumes:
      - ./chainlens-core/logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - chainlens-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "const http=require('http');const req=http.request({hostname:'localhost',port:3006,path:'/api/v1/health',timeout:5000},(res)=>{process.exit(res.statusCode===200?0:1)});req.on('error',()=>process.exit(1));req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =====================================================
  # PostgreSQL Database (Production)
  # =====================================================
  postgres:
    image: postgres:15-alpine
    container_name: chainlens-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - chainlens-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================================
  # Redis Cache & Session Store (Production)
  # =====================================================
  redis:
    image: redis:7-alpine
    container_name: chainlens-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - chainlens-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================================
  # Nginx Reverse Proxy (Production)
  # =====================================================
  nginx:
    image: nginx:alpine
    container_name: chainlens-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - chainlens-core
    networks:
      - chainlens-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # =====================================================
  # Prometheus Monitoring (Production)
  # =====================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: chainlens-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - chainlens-network
    restart: unless-stopped

  # =====================================================
  # Grafana Dashboard (Production)
  # =====================================================
  grafana:
    image: grafana/grafana:latest
    container_name: chainlens-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - chainlens-network
    restart: unless-stopped

# =====================================================
# Networks
# =====================================================
networks:
  chainlens-network:
    driver: bridge
    name: chainlens-network-prod

# =====================================================
# Volumes
# =====================================================
volumes:
  postgres-data:
    name: chainlens-postgres-data-prod
  redis-data:
    name: chainlens-redis-data-prod
  prometheus-data:
    name: chainlens-prometheus-data
  grafana-data:
    name: chainlens-grafana-data
  nginx-logs:
    name: chainlens-nginx-logs
