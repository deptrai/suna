version: '3.8'

services:
  # PostgreSQL for microservices
  postgres-microservices:
    image: postgres:15-alpine
    container_name: chainlens-postgres-microservices
    environment:
      POSTGRES_DB: chainlens_microservices
      POSTGRES_USER: chainlens
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chainlens_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_microservices_data:/var/lib/postgresql/data
      - ../database/migrations:/docker-entrypoint-initdb.d
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chainlens -d chainlens_microservices"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - chainlens-network

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: chainlens-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-chainlens_redis_password}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - chainlens-network

  # ChainLens-Core (API Gateway)
  chainlens-core:
    build:
      context: ./chainlens-core
      dockerfile: Dockerfile.dev
    container_name: chainlens-core
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - DATABASE_URL=postgresql://chainlens:${POSTGRES_PASSWORD:-chainlens_dev_password}@postgres-microservices:5432/chainlens_microservices
      - REDIS_URL=redis://:${REDIS_PASSWORD:-chainlens_redis_password}@redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - LOG_LEVEL=debug
      - THROTTLE_TTL=60
      - THROTTLE_LIMIT=1000
      - HTTP_TIMEOUT=30000
    volumes:
      - ./chainlens-core/src:/app/src
      - ./chainlens-core/package.json:/app/package.json
      - chainlens_core_node_modules:/app/node_modules
    depends_on:
      postgres-microservices:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - chainlens-network

  # OnChain Analysis Service
  onchain-service:
    build:
      context: ./onchain-analysis
      dockerfile: Dockerfile.dev
    container_name: chainlens-onchain-analysis
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - SERVICE_NAME=onchain-analysis
      - DATABASE_URL=postgresql://chainlens:${POSTGRES_PASSWORD:-chainlens_dev_password}@postgres-microservices:5432/chainlens_microservices
      - REDIS_URL=redis://:${REDIS_PASSWORD:-chainlens_redis_password}@redis:6379
      - MORALIS_API_KEY=${MORALIS_API_KEY}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - DEXSCREENER_API_URL=https://api.dexscreener.com
      - DEFILLAMA_API_URL=https://api.llama.fi
      - LOG_LEVEL=debug
    volumes:
      - ./onchain-analysis/src:/app/src
      - ./onchain-analysis/package.json:/app/package.json
      - onchain_node_modules:/app/node_modules
    depends_on:
      postgres-microservices:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - chainlens-network

  # Sentiment Analysis Service
  sentiment-service:
    build:
      context: ./sentiment-analysis
      dockerfile: Dockerfile.dev
    container_name: chainlens-sentiment-analysis
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - SERVICE_NAME=sentiment-analysis
      - DATABASE_URL=postgresql://chainlens:${POSTGRES_PASSWORD:-chainlens_dev_password}@postgres-microservices:5432/chainlens_microservices
      - REDIS_URL=redis://:${REDIS_PASSWORD:-chainlens_redis_password}@redis:6379
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - LOG_LEVEL=debug
    volumes:
      - ./sentiment-analysis/src:/app/src
      - ./sentiment-analysis/package.json:/app/package.json
      - sentiment_node_modules:/app/node_modules
    depends_on:
      postgres-microservices:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - chainlens-network

  # Tokenomics Analysis Service
  tokenomics-service:
    build:
      context: ./tokenomics-analysis
      dockerfile: Dockerfile.dev
    container_name: chainlens-tokenomics-analysis
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - SERVICE_NAME=tokenomics-analysis
      - DATABASE_URL=postgresql://chainlens:${POSTGRES_PASSWORD:-chainlens_dev_password}@postgres-microservices:5432/chainlens_microservices
      - REDIS_URL=redis://:${REDIS_PASSWORD:-chainlens_redis_password}@redis:6379
      - DEFILLAMA_API_URL=https://api.llama.fi
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - LOG_LEVEL=debug
    volumes:
      - ./tokenomics-analysis/src:/app/src
      - ./tokenomics-analysis/package.json:/app/package.json
      - tokenomics_node_modules:/app/node_modules
    depends_on:
      postgres-microservices:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - chainlens-network

  # Team Verification Service
  team-service:
    build:
      context: ./team-verification
      dockerfile: Dockerfile.dev
    container_name: chainlens-team-verification
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - SERVICE_NAME=team-verification
      - DATABASE_URL=postgresql://chainlens:${POSTGRES_PASSWORD:-chainlens_dev_password}@postgres-microservices:5432/chainlens_microservices
      - REDIS_URL=redis://:${REDIS_PASSWORD:-chainlens_redis_password}@redis:6379
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - LINKEDIN_API_KEY=${LINKEDIN_API_KEY}
      - LOG_LEVEL=debug
    volumes:
      - ./team-verification/src:/app/src
      - ./team-verification/package.json:/app/package.json
      - team_node_modules:/app/node_modules
    depends_on:
      postgres-microservices:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - chainlens-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: chainlens-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - chainlens-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: chainlens-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - chainlens-network

volumes:
  postgres_microservices_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  chainlens_core_node_modules:
    driver: local
  onchain_node_modules:
    driver: local
  sentiment_node_modules:
    driver: local
  tokenomics_node_modules:
    driver: local
  team_node_modules:
    driver: local

networks:
  chainlens-network:
    driver: bridge
    name: chainlens-crypto-network
