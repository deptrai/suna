# ChainLens Parallel Operations Configuration v3.1
# Enhanced parallel kill/start operations settings

# ============================================================================
# PARALLEL OPERATIONS SETTINGS
# ============================================================================

# Enable/disable parallel operations
ENABLE_PARALLEL_OPERATIONS=true

# Enable/disable specific parallel features
PARALLEL_KILL_ENABLED=true
PARALLEL_START_ENABLED=true
STARTUP_VERIFICATION_ENABLED=true

# ============================================================================
# TIMEOUT SETTINGS
# ============================================================================

# Parallel kill timeout (seconds)
PARALLEL_KILL_TIMEOUT=${PARALLEL_KILL_TIMEOUT:-30}

# Parallel start timeout (seconds)
PARALLEL_START_TIMEOUT=${PARALLEL_START_TIMEOUT:-60}

# Process check interval (seconds)
PROCESS_CHECK_INTERVAL=${PROCESS_CHECK_INTERVAL:-1}

# Maximum retry attempts for failed operations
MAX_PARALLEL_RETRIES=${MAX_PARALLEL_RETRIES:-3}

# ============================================================================
# SERVICE CONFIGURATION
# ============================================================================

# Service startup timeouts (seconds)
REDIS_STARTUP_TIMEOUT=10
BACKEND_STARTUP_TIMEOUT=30
WORKER_STARTUP_TIMEOUT=20
FRONTEND_STARTUP_TIMEOUT=45
MONITOR_STARTUP_TIMEOUT=5

# Service health check intervals (seconds)
REDIS_HEALTH_CHECK_INTERVAL=2
BACKEND_HEALTH_CHECK_INTERVAL=3
WORKER_HEALTH_CHECK_INTERVAL=5
FRONTEND_HEALTH_CHECK_INTERVAL=5
MONITOR_HEALTH_CHECK_INTERVAL=10

# ============================================================================
# DEPENDENCY MANAGEMENT
# ============================================================================

# Dependency wave delay (seconds between waves)
DEPENDENCY_WAVE_DELAY=2

# Maximum dependency resolution attempts
MAX_DEPENDENCY_RESOLUTION_ATTEMPTS=5

# Circular dependency detection enabled
CIRCULAR_DEPENDENCY_DETECTION=true

# ============================================================================
# PROCESS MANAGEMENT
# ============================================================================

# PID file directory
PID_DIR="../pids"

# Process monitoring enabled
PROCESS_MONITORING_ENABLED=true

# Process status update interval (seconds)
PROCESS_STATUS_UPDATE_INTERVAL=5

# Zombie process cleanup enabled
ZOMBIE_PROCESS_CLEANUP=true

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================

# Enhanced logging enabled
ENHANCED_LOGGING_ENABLED=true

# Log level (DEBUG, INFO, WARN, ERROR)
LOG_LEVEL=INFO

# Structured logging enabled
STRUCTURED_LOGGING_ENABLED=true

# Performance metrics collection
PERFORMANCE_METRICS_ENABLED=true

# Metrics export interval (seconds)
METRICS_EXPORT_INTERVAL=30

# ============================================================================
# ADVANCED SETTINGS
# ============================================================================

# Force kill timeout (seconds) - used when graceful kill fails
FORCE_KILL_TIMEOUT=10

# Service restart delay (seconds)
SERVICE_RESTART_DELAY=5

# Maximum concurrent operations
MAX_CONCURRENT_OPERATIONS=10

# Resource usage monitoring
RESOURCE_MONITORING_ENABLED=true

# Memory usage threshold (MB) for warnings
MEMORY_WARNING_THRESHOLD=1024

# CPU usage threshold (%) for warnings
CPU_WARNING_THRESHOLD=80

# ============================================================================
# DEVELOPMENT SETTINGS
# ============================================================================

# Debug mode enabled
DEBUG_MODE=false

# Verbose output enabled
VERBOSE_OUTPUT=false

# Dry run mode (don't actually start/stop services)
DRY_RUN_MODE=false

# Test mode enabled
TEST_MODE=false

# ============================================================================
# COMPATIBILITY SETTINGS
# ============================================================================

# Fallback to sequential operations if parallel fails
FALLBACK_TO_SEQUENTIAL=true

# Backward compatibility mode
BACKWARD_COMPATIBILITY_MODE=false

# Legacy script support
LEGACY_SCRIPT_SUPPORT=true

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# Secure PID file permissions
SECURE_PID_PERMISSIONS=true

# Process isolation enabled
PROCESS_ISOLATION_ENABLED=true

# Service user restrictions
SERVICE_USER_RESTRICTIONS=false

# ============================================================================
# PERFORMANCE TUNING
# ============================================================================

# Optimize for startup speed
OPTIMIZE_STARTUP_SPEED=true

# Optimize for resource usage
OPTIMIZE_RESOURCE_USAGE=false

# Optimize for reliability
OPTIMIZE_RELIABILITY=true

# Parallel job queue size
PARALLEL_JOB_QUEUE_SIZE=20

# Background job timeout (seconds)
BACKGROUND_JOB_TIMEOUT=120

# ============================================================================
# NOTIFICATION SETTINGS
# ============================================================================

# Enable startup notifications
STARTUP_NOTIFICATIONS=true

# Enable failure notifications
FAILURE_NOTIFICATIONS=true

# Notification methods (console, log, webhook)
NOTIFICATION_METHODS="console,log"

# Webhook URL for notifications (if webhook method enabled)
NOTIFICATION_WEBHOOK_URL=""

# ============================================================================
# ENVIRONMENT SPECIFIC OVERRIDES
# ============================================================================

# Development environment overrides
if [[ "${ENVIRONMENT:-}" == "development" ]]; then
    DEBUG_MODE=true
    VERBOSE_OUTPUT=true
    ENHANCED_LOGGING_ENABLED=true
fi

# Production environment overrides
if [[ "${ENVIRONMENT:-}" == "production" ]]; then
    DEBUG_MODE=false
    VERBOSE_OUTPUT=false
    OPTIMIZE_RELIABILITY=true
    SECURE_PID_PERMISSIONS=true
fi

# Testing environment overrides
if [[ "${ENVIRONMENT:-}" == "testing" ]]; then
    TEST_MODE=true
    DRY_RUN_MODE=false
    PARALLEL_KILL_TIMEOUT=10
    PARALLEL_START_TIMEOUT=20
fi

# ============================================================================
# VALIDATION
# ============================================================================

# Validate configuration values
validate_parallel_config() {
    local errors=()
    
    # Check timeout values
    if [[ $PARALLEL_KILL_TIMEOUT -lt 5 || $PARALLEL_KILL_TIMEOUT -gt 300 ]]; then
        errors+=("PARALLEL_KILL_TIMEOUT must be between 5 and 300 seconds")
    fi
    
    if [[ $PARALLEL_START_TIMEOUT -lt 10 || $PARALLEL_START_TIMEOUT -gt 600 ]]; then
        errors+=("PARALLEL_START_TIMEOUT must be between 10 and 600 seconds")
    fi
    
    if [[ $PROCESS_CHECK_INTERVAL -lt 1 || $PROCESS_CHECK_INTERVAL -gt 10 ]]; then
        errors+=("PROCESS_CHECK_INTERVAL must be between 1 and 10 seconds")
    fi
    
    # Check retry values
    if [[ $MAX_PARALLEL_RETRIES -lt 0 || $MAX_PARALLEL_RETRIES -gt 10 ]]; then
        errors+=("MAX_PARALLEL_RETRIES must be between 0 and 10")
    fi
    
    # Check boolean values
    local boolean_vars=(
        "ENABLE_PARALLEL_OPERATIONS"
        "PARALLEL_KILL_ENABLED"
        "PARALLEL_START_ENABLED"
        "STARTUP_VERIFICATION_ENABLED"
    )
    
    for var in "${boolean_vars[@]}"; do
        local value="${!var}"
        if [[ "$value" != "true" && "$value" != "false" ]]; then
            errors+=("$var must be 'true' or 'false'")
        fi
    done
    
    # Report errors
    if [[ ${#errors[@]} -gt 0 ]]; then
        echo "Configuration validation errors:" >&2
        printf "  - %s\n" "${errors[@]}" >&2
        return 1
    fi
    
    return 0
}

# Auto-validate on source
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    validate_parallel_config
fi
